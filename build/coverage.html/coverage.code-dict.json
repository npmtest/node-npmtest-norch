{"/home/travis/build/npmtest/node-npmtest-norch/test.js":"/* istanbul instrument in package npmtest_norch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-norch/lib.npmtest_norch.js":"/* istanbul instrument in package npmtest_norch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_norch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_norch = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-norch/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-norch && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_norch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_norch\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_norch.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_norch.rollup.js'] =\n            local.assetsDict['/assets.npmtest_norch.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_norch.__dirname + '/lib.npmtest_norch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-norch/node_modules/norch/lib/norch.js":"module.exports = function (options, callback) {\n  options = options || {}\n  const Logger = require('bunyan')\n  const _ = require('lodash')\n  const fs = require('fs')\n  const searchindex = require('search-index')\n  // If a search-index is being passed to Norch- use\n  var norchHome = options.norchHome || 'norch-index'\n  fs.mkdir(norchHome, function (err) {\n    options = _.defaults(\n      options, {\n        cors: null,\n        norchHome: norchHome,\n        log: new Logger.createLogger({ // eslint-disable-line\n          name: 'norch',\n          level: options.logLevel || 'info',\n          serializers: {\n            req: function (req) {\n              return {\n                method: req.method,\n                url: req.url,\n                headers: req.headers\n              }\n            }\n          },\n          streams: [\n            {\n              path: norchHome + '/info.log',\n              level: 'info'\n            },\n            {\n              path: norchHome + '/error.log',\n              level: 'error'\n            }\n          ]\n        }),\n        port: 3030,\n        machineReadable: true,\n        si: null\n      })\n    if (err) options.log.info(err)\n    if (process.argv.indexOf('-h') === -1) {\n      if (options.si) {\n        return startServer(options, callback)\n      } else {\n        searchindex({\n          indexPath: norchHome + '/data',\n          log: options.log\n        }, function (err, si) {\n          if (err) {\n            console.log(err)\n          } else {\n            options.si = si\n            // maybe delete norchHome?\n            return startServer(options, callback)\n          }\n        })\n      }\n    }\n  })\n}\n\nvar startServer = function (options, callback) {\n  options.log.info('server starting')\n  if (!options.machineReadable) {\n    require('./printLogo.js')(options)\n  }\n  var fs = require('fs')\n  var restify = require('restify')\n  var routes = require('./routeFunctions.js')(options)\n\n  var norch = restify.createServer({\n    name: 'norch',\n    version: require('../package.json').version,\n    log: options.log\n  })\n  norch.listen(options.port)\n  norch.pre(function (request, response, next) {\n    request.log.info({\n      req: request,\n      req_id: request.getId()\n    }, 'REQUEST')\n    next()\n  })\n  norch.use(restify.queryParser())\n  norch.use(restify.requestLogger({}))\n  norch.use(restify.CORS(options.cors))\n\n  // initialise snapshot dir\n  try {\n    fs.mkdirSync('./snapshots')\n  } catch (e) {\n    // what to do here?\n  }\n\n  // ******* GET *********\n\n  norch.get('/availableFields', routes.availableFields)\n  norch.get('/docCount', routes.docCount)\n  norch.get('/buckets', routes.buckets)\n  norch.get('/categorize', routes.categorize)\n  norch.get('/get', routes.get)\n  norch.get('/latestSnapshot', routes.latestSnapshot)\n  norch.get('/matcher', routes.match)   // deprecated\n  norch.get('/match', routes.match)\n  norch.get('/search', routes.search)\n  norch.get('/totalHits', routes.totalHits)\n  norch.get('/listSnapshots', routes.listSnapshots)\n  norch.get(/\\//, restify.serveStatic({\n    directory: __dirname,\n    file: './index.html'\n  }))\n\n  // ******* POST *********\n\n  norch.post('/add', routes.add)\n  norch.post('/concurrentAdd', restify.bodyParser(), routes.concurrentAdd)\n  norch.post('/import', routes.replicate)\n  norch.post('/snapshot', routes.snapshot)\n\n  // ******* DEL *********\n\n  // TODO: throw error if user tries to GET or POST flush\n  norch.del('/flush', routes.flush)\n  norch.del('/delete', routes.del)\n\n  norch.options = options\n  return callback(null, norch)\n}\n","/home/travis/build/npmtest/node-npmtest-norch/node_modules/norch/lib/printLogo.js":"module.exports = function (program) {\n  /* eslint-disable no-unused-vars */\n  var colors = require('colors')\n  /* eslint-enable no-unused-vars */\n  console.log()\n  console.log('      ___           ___           ___           ___           ___      '.red)\n  console.log('     /\\\\'.white + '__\\\\'.red + '         /\\\\'.white + '  \\\\'.red + '         /\\\\'.white + '  \\\\'.red + '         /\\\\'.white + '  \\\\'.red + '         /\\\\'.white + '__\\\\     '.red)\n  console.log('    /::|'.white + '  |'.red + '       /::\\\\'.white + '  \\\\'.red + '       /::\\\\'.white + '  \\\\'.red + '       /::\\\\'.white + '  \\\\'.red + '       /:/'.white + '  /     '.red)\n  console.log('   /:|:|'.white + '  |'.red + '      /:/\\\\:\\\\'.white + '  \\\\'.red + '     /:/\\\\:\\\\'.white + '  \\\\'.red + '     /:/\\\\:\\\\'.white + '  \\\\'.red + '     /:/'.white + '__/      '.red)\n  console.log('  /:/|:|'.white + '  |__'.red + '   /:/  \\\\:\\\\'.white + '  \\\\'.red + '   /::\\\\'.white + '~'.red + '\\\\:\\\\'.white + '  \\\\'.red + '   /:/  \\\\:\\\\'.white + '  \\\\'.red + '   /::\\\\'.white + '  \\\\ ___  '.red)\n  console.log(' /:/ |:| /\\\\'.white + '__\\\\'.red + ' /:/'.white + '__/'.red + ' \\\\:\\\\'.white + '__\\\\'.red + ' /:/\\\\:\\\\ \\\\:\\\\'.white + '__\\\\'.red + ' /:/'.white + '__/'.red + ' \\\\:\\\\'.white + '__\\\\'.red + ' /:/\\\\:\\\\  /\\\\'.white + '__\\\\ '.red)\n  console.log(' \\\\/'.white + '__'.red + '|:|/:/'.white + '  /'.red + ' \\\\:\\\\'.white + '  \\\\'.red + ' /:/'.white + '  /'.red + ' \\\\/'.white + '_'.red + '|::\\\\/:/'.white + '  /'.red + ' \\\\:\\\\'.white + '  \\\\'.red + '  \\\\/'.white + '__/'.red + ' \\\\/'.white + '__'.red + '\\\\:\\\\/:/'.white + '  / '.red)\n  console.log('     |:/:/'.white + '  /'.red + '   \\\\:\\\\  /:/'.white + '  /'.red + '     |:|::/'.white + '  /'.red + '   \\\\:\\\\'.white + '  \\\\'.red + '            \\\\::/'.white + '  /  '.red)\n  console.log('     |::/'.white + '  /'.red + '     \\\\:\\\\/:/'.white + '  /'.red + '      |:|\\\\/'.white + '__/'.red + '     \\\\:\\\\'.white + '  \\\\'.red + '           /:/'.white + '  /   '.red)\n  console.log('     /:/'.white + '  /'.red + '       \\\\::/'.white + '  /'.red + '       |:|'.white + '  |'.red + '        \\\\:\\\\'.white + '__\\\\'.red + '         /:/'.white + '  /    '.red)\n  console.log('     \\\\/'.white + '__/'.red + '         \\\\/'.white + '__/'.red + '         \\\\|'.white + '__|'.red + '         \\\\/'.white + '__/'.red + '         \\\\/'.white + '__/     '.red)\n  console.log()\n  console.log('MIT license, 2013-2016'.red)\n  console.log('https://github.com/fergiemcdowall/norch'.red)\n  console.log()\n  console.log('Norch server listening on port ' + program.port)\n  console.log()\n}\n","/home/travis/build/npmtest/node-npmtest-norch/node_modules/norch/lib/routeFunctions.js":"const snapshotDir = './snapshots/'\nconst JSONStream = require('JSONStream')\nconst Readable = require('stream').Readable\n\nmodule.exports = function (options) {\n  var fs = require('fs')\n  var routeFunctions = {}\n\n  var parseQuery = function (res, req, param) {\n    try {\n      return JSON.parse(req.query[param] || '{}')\n    } catch (e) {\n      res.status(500)\n      res.write(e + '\\n')\n      res.end()\n    }\n  }\n\n  var resWrite = function (res, level, message) {\n    level = level || ''\n    if (level.trim().toLowerCase() === 'verbose') {\n      res.write(message)\n      return\n    } else if (level.trim().toLowerCase() === 'silent') {\n      return\n    } else {\n      res.write('.')\n      return\n    }\n  }\n\n  var sendError = function (res, e) {\n    res.status(500)\n    res.send(e)\n  }\n\n  routeFunctions.availableFields = function (req, res, next) {\n    options.si.availableFields().pipe(res)\n  }\n\n  routeFunctions.add = function (req, res, next) {\n    req\n      .pipe(JSONStream.parse())\n      .on('data', function (d) {\n        var ev = { event: 'received' }\n        if (d.id) ev.id = d.id\n        resWrite(res, req.query.responseLevel, JSON.stringify(ev) + '\\n')\n      })\n      .pipe(options.si.defaultPipeline())\n      .on('data', function (d) {\n        var ev = {\n          event: 'processed',\n          id: d.id\n        }\n        resWrite(res, req.query.responseLevel, JSON.stringify(ev) + '\\n')\n      })\n      .pipe(options.si.add({batchSize: 2000}))\n      .on('data', function (d) {\n        var ev = {}\n        if (d.totalKeys) {\n          ev.event = 'dbKeysCounted'\n          ev.count = d.totalKeys\n          resWrite(res, req.query.responseLevel, JSON.stringify(ev) + '\\n')\n        } else {\n          ev = {\n            event: 'dbInsert',\n            key: d\n          }\n          resWrite(res, req.query.responseLevel, JSON.stringify(ev) + '\\n')\n        }\n      })\n      .on('finish', function () {\n        res.write(JSON.stringify({ event: 'finished' }) + '\\n')\n        res.end()\n        return next()\n      })\n  }\n\n  routeFunctions.buckets = function (req, res, next) {\n    options.si.buckets(parseQuery(res, req, 'q'))\n      .on('error', function (e) { sendError(res, e) })\n      .pipe(JSONStream.stringify('', '\\n', ''))\n      .pipe(res)\n      .on('finish', function () {\n        return next()\n      })\n  }\n\n  routeFunctions.docCount = function (req, res, next) {\n    options.si.countDocs(function (e, docCount) {\n      if (e) { sendError(res, e) }\n      res.send({\n        docCount: String(docCount)\n      })\n      return next()\n    })\n  }\n\n  routeFunctions.categorize = function (req, res, next) {\n    options.si.categorize(parseQuery(res, req, 'q'))\n      .on('error', function (e) { sendError(res, e) })\n      .pipe(JSONStream.stringify('', '\\n', ''))\n      .pipe(res)\n      .on('finish', function () {\n        return next()\n      })\n  }\n\n  routeFunctions.concurrentAdd = function (req, res, next) {\n    options.si.concurrentAdd({}, [req.body], function (e) {\n      if (e) { sendError(res, e) } else {\n        res.status(200)\n        res.send()\n      }\n    })\n  }\n\n  routeFunctions.del = function (req, res, next) {\n    options.si.del(parseQuery(res, req, 'ids'), function (e) {\n      if (e) { sendError(res, e) }\n      res.send('batch deleted')\n    })\n  }\n\n  routeFunctions.flush = function (req, res, next) {\n    options.si.flush(function (e) {\n      if (e) {\n        sendError(res, e)\n      } else {\n        res.send('index flushed') // should be an event object?\n      }\n      return next()\n    })\n  }\n\n  routeFunctions.get = function (req, res, next) {\n    options.si.get(parseQuery(res, req, 'ids'), options)\n      .on('error', function (e) { sendError(res, e) })\n      .pipe(JSONStream.stringify('', '\\n', ''))\n      .pipe(res)\n      .on('finish', function () {\n        return next()\n      })\n  }\n\n  routeFunctions.latestSnapshot = function (req, res, next) {\n    fs.readdir(snapshotDir, function (e, files) {\n      if (e) { sendError(e) }\n      fs.createReadStream(snapshotDir + files.pop()).pipe(res)\n      return next()\n    })\n  }\n\n  routeFunctions.listSnapshots = function (req, res, next) {\n    fs.readdir(snapshotDir, function (e, files) {\n      if (e) {\n        sendError(e)\n      }\n      var s = new Readable()\n      files.forEach(function (item) {\n        s.push('<a href=\"/snapshots/' + item + '\">' + item + '</a><br>')\n      })\n      s.push(null)\n      s.pipe(res)\n      return next()\n    })\n  }\n\n  routeFunctions.match = function (req, res, next) {\n    options.si.match(parseQuery(res, req, 'q'), options)\n      .on('error', function (e) { sendError(res, e) })\n      .pipe(JSONStream.stringify('', '\\n', ''))\n      .pipe(res)\n      .on('finish', function () {\n        return next()\n      })\n  }\n\n  routeFunctions.replicate = function (req, res, next) {\n    req\n      .pipe(JSONStream.parse())\n      .pipe(options.si.dbWriteStream())\n      .on('data', function (d) {})\n      .on('error', function (e) { sendError(res, e) })\n      .on('end', function () {\n        res.send('replication complete')\n        return next()\n      })\n  }\n\n  routeFunctions.snapshot = function (req, res, next) {\n    options.si.dbReadStream()\n      .pipe(JSONStream.stringify('', '\\n', ''))\n      .pipe(fs.createWriteStream(snapshotDir + Date.now() + '.json'))\n      .on('close', function () {\n        res.send('replication complete')\n        return next()\n      })\n  }\n\n  routeFunctions.search = function (req, res, next) {\n    res.setHeader('content-type', 'application/json')\n    options.si.search(parseQuery(res, req, 'q'))\n      .pipe(JSONStream.stringify('', '\\n', ''))\n      .pipe(res)\n    return next()\n  }\n\n  routeFunctions.totalHits = function (req, res, next) {\n    options.si.totalHits(parseQuery(res, req, 'q'), function (e, totalHits) {\n      if (e) { sendError(res, e) }\n      res.send({\n        totalHits: totalHits\n      })\n    })\n  }\n\n  return routeFunctions\n}\n","/home/travis/build/npmtest/node-npmtest-norch/node_modules/norch/lib/runNorch.js":"// use this script to run a norch from a node prompt\n// \"> node runNorch.js\" instead of \"norch\"\n\nvar program = require('commander')\nprogram.version(require('../package.json').version)\n  .option('-p, --port <port>', 'specify the port, defaults to PORT or 3030', Number, process.env.PORT || 3030)\n  .option('-i, --norchHome <norchHome>', 'specify the name of the directory that stores the data and the logs, defaults to norch-index', String, 'norch-index')\n  .option('-l, --logLevel <logLevel>', 'specify the loglevel- silly | debug | verbose | info | warn | error', String, 'info')\n  .option('-m, --machineReadable', 'machine readable, logo not printed, all stdout/stderr is JSON')\n  .parse(process.argv)\n\nvar options = {}\noptions.norchHome = program.norchHome\noptions.logLevel = program.logLevel\noptions.port = program.port\noptions.machineReadable = program.machineReadable || false\n\nrequire('./norch.js')(options, function (err, norch) {\n  if (err) console.log(err)\n  // what to do here?\n  return norch\n})\n"}